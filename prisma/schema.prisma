// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  email      String  @unique
  username   String  @unique
  password   String
  firstName  String?
  lastName   String?
  bio        String?
  profession String?
  avatar     String?

  // Account status
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)

  // Security
  lastLogin                DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  emailVerificationToken   String?
  emailVerificationExpires DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chats     Chat[]
  documents Document[]
  charts    Chart[]

  @@map("users")
}

model Chat {
  id         String  @id @default(cuid())
  title      String
  isArchived Boolean @default(false)

  // Relations
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  documents Document[]
  charts    Chart[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}

model Message {
  id       String @id @default(cuid())
  content  String
  role     String // 'user' | 'assistant' | 'system'
  metadata Json? // Store additional data like processing time, tokens, etc.

  // Relations
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@map("messages")
}

model Document {
  id           String @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String

  // Processing status
  status        String  @default("pending") // 'pending' | 'processing' | 'completed' | 'failed'
  extractedText String?
  summary       String?
  metadata      Json?

  // Relations
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId String?
  chat   Chat?   @relation(fields: [chatId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

model Chart {
  id          String  @id @default(cuid())
  type        String // 'line' | 'bar' | 'pie' | 'scatter' | etc.
  title       String
  description String?
  config      Json // Chart configuration and data

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("charts")
}
